<<<<<<< HEAD
=======
LocLatitude = as.numeric(LocLatitude)
)
#Get Petrol data
petrol_data <- future(GET("http://cac.gov.jm/dev/SurveyEnquiry/PetrolPrices.php?Key=e8189538-d0ca-4899-adae-18f454eca9f9")) %...>%
httr::content() %>%
mutate(LocLongitude = as.numeric(LocLongitude),
LocLatitude = as.numeric(LocLatitude))
#Get Petrol data
petrol_data <- future(GET("http://cac.gov.jm/dev/SurveyEnquiry/PetrolPrices.php?Key=e8189538-d0ca-4899-adae-18f454eca9f9")) %...>%
httr::content() %>%
as.data.frame() %>%
mutate(LocLongitude = as.numeric(LocLongitude),
LocLatitude = as.numeric(LocLatitude))
#Get Petrol data
petrol_data <- future(GET("http://cac.gov.jm/dev/SurveyEnquiry/PetrolPrices.php?Key=e8189538-d0ca-4899-adae-18f454eca9f9")) %...>%
>>>>>>> eac80a6370e77de603e4f474e4e96c0dc5002abb
httr::content() %...>%
mutate(LocLongitude = as.numeric(LocLongitude),
LocLatitude = as.numeric(LocLatitude))
View(petrol_data)
runApp('CACPetrolApp')
runApp('CACPetrolApp')
runApp('CACPetrolApp')
runApp('CACPetrolApp')
runApp('CACPetrolApp')
runApp('CACPetrolApp')
runApp('CACPetrolApp')
runApp('CACPetrolApp')
testplot <- petrol_data %>%
filter(ItemName == "E-10 GASOLENE - 87 OCTANE NONE 1 L",
!is.na(Price),
Price != 0,
Price < 400) %>%
ggplot(aes(x = StartDate,
y = Price)) +
geom_point() +
stat_summary(fun.y = "max",
colour = "red",
geom = "point") +
stat_summary(fun.y = "min",
colour = "green",
geom = "point") +
stat_summary(fun.y = "mean",
color = "blue",
geom = "line")
ggplotly(testplot)
shiny::runApp('CACPetrolApp')
install.packages("dygraphs")
library(dygraphs)
petrol_data %>%
filter(ItemName == "E-10 GASOLENE - 87 OCTANE NONE 1 L",
!is.na(Price),
Price != 0,
Price < 400) %>%
select(ItemName, StartDate) %>%
dygraph()
plot_data<- petrol_data %>%
filter(ItemName == "E-10 GASOLENE - 87 OCTANE NONE 1 L",
!is.na(Price),
Price != 0,
Price < 400) %>%
select(ItemName, StartDate)
dygraph(plot_data)
source('C:/Users/egalbraith/Desktop/CAC Petrol App/CAC-Petrol-App/CACPetrolApp/global.R')
plot_data<- petrol_data %>%
filter(ItemName == "E-10 GASOLENE - 87 OCTANE NONE 1 L",
!is.na(Price),
Price != 0,
Price < 400) %>%
select(ItemName, StartDate) %>%
xts::xts()
dygraph(plot_data)
plot_data<- petrol_data %>%
filter(ItemName == "E-10 GASOLENE - 87 OCTANE NONE 1 L",
!is.na(Price),
Price != 0,
Price < 400) %>%
select(ItemName, StartDate) %>%
xts::xts(order.by = StartDate)
plot_data<- petrol_data %>%
filter(ItemName == "E-10 GASOLENE - 87 OCTANE NONE 1 L",
!is.na(Price),
Price != 0,
Price < 400) %>%
select(ItemName, StartDate) %>%
xts::xts(order.by = "StartDate")
plot_data<- petrol_data %>%
filter(ItemName == "E-10 GASOLENE - 87 OCTANE NONE 1 L",
!is.na(Price),
Price != 0,
Price < 400) %>%
select(ItemName, StartDate) %>%
xts::as.xts()
plot_data<- petrol_data %>%
filter(ItemName == "E-10 GASOLENE - 87 OCTANE NONE 1 L",
!is.na(Price),
Price != 0,
Price < 400) %>%
select(ItemName, StartDate)
View(plot_data)
plot_data<- petrol_data %>%
filter(ItemName == "E-10 GASOLENE - 87 OCTANE NONE 1 L",
!is.na(Price),
Price != 0,
Price < 400) %>%
select(StartDate, Price)
plot_data<- petrol_data %>%
filter(ItemName == "E-10 GASOLENE - 87 OCTANE NONE 1 L",
!is.na(Price),
Price != 0,
Price < 400) %>%
select(StartDate, Price) %>%
xts::as.xts()
plot_data<- petrol_data %>%
filter(ItemName == "E-10 GASOLENE - 87 OCTANE NONE 1 L",
!is.na(Price),
Price != 0,
Price < 400) %>%
select(StartDate, Price) %>%
mutate(StartDate = as.Date(StartDate, format = "%Y-%m-%d"))
class(plot_data$StartDate)
plot_data<- petrol_data %>%
filter(ItemName == "E-10 GASOLENE - 87 OCTANE NONE 1 L",
!is.na(Price),
Price != 0,
Price < 400) %>%
select(StartDate, Price) %>%
mutate(StartDate = as.Date(StartDate, format = "%Y-%m-%d")) %>%
xts::as.xts()
library(tidyverse)
library(xts)
data("AirPassengers")
plot_data<- petrol_data %>%
filter(ItemName == "E-10 GASOLENE - 87 OCTANE NONE 1 L",
!is.na(Price),
Price != 0,
Price < 400) %>%
select(StartDate, Price) %>%
mutate(StartDate = as.Date(StartDate, format = "%Y-%m-%d"))
rownames(plot_data) <- plot_data[1]
plot_data<- petrol_data %>%
filter(ItemName == "E-10 GASOLENE - 87 OCTANE NONE 1 L",
!is.na(Price),
Price != 0,
Price < 400) %>%
select(StartDate, Price)
rownames(plot_data) <- plot_data[1]
rownames(plot_data) <- plot_data[[1]]
rownames(plot_data) <- plot_data$StartDate
plot_data<- petrol_data %>%
filter(ItemName == "E-10 GASOLENE - 87 OCTANE NONE 1 L",
!is.na(Price),
Price != 0,
Price < 400) %>%
select(StartDate, Price) %>%
group_by(StartDate) %>%
summarise(Price = mean(Price, na.rm = T))
rownames(plot_data) <- plot_data$StartDate
xts(plot_data)
as.xts(plot_data)
petrol_xts <- as.xts(plot_data)
library(dygraphs)
dygraph(petrol_xts)
dygraph(petrol_xts) %>%
dyRangeSelector()
plot_data<- petrol_data %>%
filter(!is.na(Price),
Price != 0,
Price < 400) %>%
select(StartDate, Price)
View(plot_data)
plot_data<- petrol_data %>%
filter(!is.na(Price),
Price != 0,
Price < 400) %>%
select(StartDate,ItemName, Price) %>%
group_by(StartDate, ItemName) %>%
summarise(Price = mean(Price, na.rm = T))
View(plot_data)
rownames(plot_data) <- plot_data$StartDate
petrol_xts <- as.xts(plot_data)
dygraph(petrol_xts) %>%
dyRangeSelector()
rownames(plot_data) <- plot_data$StartDate
plot_data<- petrol_data %>%
filter(!is.na(Price),
Price != 0,
Price < 400) %>%
select(StartDate,ItemName, Price) %>%
group_by(StartDate, ItemName) %>%
summarise(Price = mean(Price, na.rm = T))
plot_data<- petrol_data %>%
filter(!is.na(Price),
Price != 0,
Price < 400) %>%
select(StartDate,ItemName, Price) %>%
group_by(StartDate, ItemName) %>%
summarise(Price = mean(Price, na.rm = T)) %>%
ungroup() %>%
spread(ItemName, Price)
rownames(plot_data) <- plot_data$StartDate
petrol_xts <- as.xts(plot_data)
dygraph(petrol_xts) %>%
dyRangeSelector()
dygraph(petrol_xts) %>%
dyRangeSelector() %>%
dyHighlight(highlightSeriesBackgroundAlpha = 0.2)
dygraph(petrol_xts,
main = "National Average Observed Petrol Prices (J$/L)") %>%
dyRangeSelector() %>%
dyHighlight(highlightSeriesBackgroundAlpha = 0.2)
dygraph(petrol_xts,
main = "National Average Observed Petrol Prices (J$/L)") %>%
dyRangeSelector() %>%
dyHighlight(highlightSeriesBackgroundAlpha = 0.2) %>%
dyLegend(show = "follow")
dygraph(petrol_xts,
main = "National Average Observed Petrol Prices (J$/L)") %>%
dyRangeSelector() %>%
dyHighlight(highlightSeriesBackgroundAlpha = 0.2) %>%
dyLegend(show = "follow",
width = 500)
runApp('CACPetrolApp')
library(tidyverse)
library(forecast)
library(tseries)
library(httr)
petrol_data <- GET("http://cac.gov.jm/dev/SurveyEnquiry/PetrolPrices.php?Key=e8189538-d0ca-4899-adae-18f454eca9f9") %>%
content()
forecastPetrolData <- petrol_data%>%
filter(Price !=0) %>%
group_by(StartDate, ItemName) %>%
summarise(NatlMean = mean(Price, na.rm = T)) %>%
ungroup() %>%
filter(ItemName == "E-10 GASOLENE - 90 OCTANE NONE 1 L")
ggplot(forecastPetrolData,
aes(StartDate,
NatlMean)) +
geom_line() +
scale_x_date("Month") +
labs(y = "Monthl Mean Price (J$/l)")
price_ts = ts(forecastPetrolData[,c("NatlMean")])
forecastPetrolData$clean_price = tsclean(price_ts)
ggplot() +
geom_line(data = forecastPetrolData,
aes(x = StartDate,
y = NatlMean))
forecastPetrolData$clean_price_ma = ma(forecastPetrolData$clean_price,
order = 4)
ggplot() +
geom_line(data = forecastPetrolData,
aes(x = StartDate,
y = clean_price,
color = "Price")) +
geom_line(data = forecastPetrolData,
aes(x = StartDate,
y = clean_price_ma,
color = "Monthly Average Price")) +
ylab("Price")
price_ma = ts(na.omit(forecastPetrolData$clean_price_ma),
frequency = 4)
decomp = stl(price_ma, s.window = "periodic")
deseasonal_price <- seasadj(decomp)
autoplot(decomp)
adf.test(price_ma, alternative = "stationary")
price_d2 = diff(deseasonal_price, differences = 2)
autoplot(price_d2)
adf.test(price_d2, alternative = "stationary")
ggtsdisplay(price_d2)
fit <- auto.arima(deseasonal_price,
seasonal = T,
approximation = F)
checkresiduals(fit)
seas_fcast <- forecast(fit, h=24)
autoplot(seas_fcast)
hold <- window(ts(deseasonal_price), start = 80)
fit_no_hold = arima(ts(deseasonal_price[-c(80:108)]),
order = c(2,2,5),
seasonal = c(0,0,4))
checkresiduals(fit_no_hold)
tsdisplay(residuals(fit_no_hold))
fcast_no_holdout <- forecast(fit_no_hold, h=28)
plot(fcast_no_holdout)
lines(ts(deseasonal_price))
View(petrol_data)
unique(unlist(petrol_data$ItemName))
forecastPetrolData <- petrol_data%>%
filter(Price !=0) %>%
group_by(StartDate, ItemName) %>%
summarise(NatlMean = mean(Price, na.rm = T)) %>%
ungroup() %>%
filter(ItemName == "AUTO DIESEL NONE 1 L")
ggplot(forecastPetrolData,
aes(StartDate,
NatlMean)) +
geom_line() +
scale_x_date("Month") +
labs(y = "Monthl Mean Price (J$/l)")
price_ts = ts(forecastPetrolData[,c("NatlMean")])
forecastPetrolData$clean_price = tsclean(price_ts)
ggplot() +
geom_line(data = forecastPetrolData,
aes(x = StartDate,
y = NatlMean))
forecastPetrolData$clean_price_ma = ma(forecastPetrolData$clean_price,
order = 4)
ggplot() +
geom_line(data = forecastPetrolData,
aes(x = StartDate,
y = clean_price,
color = "Price")) +
geom_line(data = forecastPetrolData,
aes(x = StartDate,
y = clean_price_ma,
color = "Monthly Average Price")) +
ylab("Price")
price_ma = ts(na.omit(forecastPetrolData$clean_price_ma),
frequency = 4)
decomp = stl(price_ma, s.window = "periodic")
deseasonal_price <- seasadj(decomp)
autoplot(decomp)
adf.test(price_ma, alternative = "stationary")
price_d2 = diff(deseasonal_price, differences = 2)
autoplot(price_d2)
adf.test(price_d2, alternative = "stationary")
ggtsdisplay(price_d2)
fit <- auto.arima(deseasonal_price,
seasonal = T,
approximation = F)
checkresiduals(fit)
seas_fcast <- forecast(fit, h=24)
autoplot(seas_fcast)
hold <- window(ts(deseasonal_price), start = 80)
fit_no_hold = arima(ts(deseasonal_price[-c(80:108)]),
order = c(2,2,5),
seasonal = c(0,0,4))
checkresiduals(fit_no_hold)
tsdisplay(residuals(fit_no_hold))
fcast_no_holdout <- forecast(fit_no_hold, h=28)
plot(fcast_no_holdout)
lines(ts(deseasonal_price))
hold <- window(ts(deseasonal_price), start = 80)
fit_no_hold = arima(ts(deseasonal_price[-c(80:108)]),
order = c(1,1,3),
seasonal = c(0,0,1))
checkresiduals(fit_no_hold)
tsdisplay(residuals(fit_no_hold))
fcast_no_holdout <- forecast(fit_no_hold, h=28)
plot(fcast_no_holdout)
lines(ts(deseasonal_price))
forecastPetrolData <- petrol_data%>%
filter(Price !=0) %>%
group_by(StartDate, ItemName) %>%
summarise(NatlMean = mean(Price, na.rm = T)) %>%
ungroup() %>%
filter(ItemName == "E-10 GASOLENE - 87 OCTANE NONE 1 L")
ggplot(forecastPetrolData,
aes(StartDate,
NatlMean)) +
geom_line() +
scale_x_date("Month") +
labs(y = "Monthl Mean Price (J$/l)")
price_ts = ts(forecastPetrolData[,c("NatlMean")])
forecastPetrolData$clean_price = tsclean(price_ts)
ggplot() +
geom_line(data = forecastPetrolData,
aes(x = StartDate,
y = NatlMean))
forecastPetrolData$clean_price_ma = ma(forecastPetrolData$clean_price,
order = 4)
ggplot() +
geom_line(data = forecastPetrolData,
aes(x = StartDate,
y = clean_price,
color = "Price")) +
geom_line(data = forecastPetrolData,
aes(x = StartDate,
y = clean_price_ma,
color = "Monthly Average Price")) +
ylab("Price")
price_ma = ts(na.omit(forecastPetrolData$clean_price_ma),
frequency = 4)
decomp = stl(price_ma, s.window = "periodic")
deseasonal_price <- seasadj(decomp)
autoplot(decomp)
adf.test(price_ma, alternative = "stationary")
price_d2 = diff(deseasonal_price, differences = 2)
autoplot(price_d2)
adf.test(price_d2, alternative = "stationary")
ggtsdisplay(price_d2)
fit <- auto.arima(deseasonal_price,
seasonal = T,
approximation = F)
checkresiduals(fit)
seas_fcast <- forecast(fit, h=24)
autoplot(seas_fcast)
hold <- window(ts(deseasonal_price), start = 80)
fit_no_hold = arima(ts(deseasonal_price[-c(80:108)]),
order = c(1,1,3),
seasonal = c(0,0,1))
checkresiduals(fit_no_hold)
tsdisplay(residuals(fit_no_hold))
fcast_no_holdout <- forecast(fit_no_hold, h=28)
plot(fcast_no_holdout)
lines(ts(deseasonal_price))
hold <- window(ts(deseasonal_price), start = 80)
fit_no_hold = arima(ts(deseasonal_price[-c(80:108)]),
order = c(2,2,5),
seasonal = c(0,0,1))
checkresiduals(fit_no_hold)
tsdisplay(residuals(fit_no_hold))
fcast_no_holdout <- forecast(fit_no_hold, h=28)
plot(fcast_no_holdout)
lines(ts(deseasonal_price))
shiny::runApp('CACPetrolApp')
library(tidyverse)
library(httr)
library(jsonlite)
library(leaflet)
library(htmltools)
library(RMySQL)
library(lubridate)
getData <- GET("https://api.jamnav.com/v1/locations/",
add_headers(Authorization="Token ffe38843ae62cfd41c964c803f0a800acfa6485d")
)%>%
content(as="parsed")%>%
toJSON() %>%
fromJSON()
grocerystores <- getData[["features"]] %>%
flatten() %>%
mutate(grocery = map(properties.categories, str_detect,
pattern = "Grocery Store"),
grocery = map_lgl(grocery, any),
lng = map(geometry.coordinates, pluck, 1) %>%
unlist(),
lat = map(geometry.coordinates, pluck, 2) %>%
unlist()) %>%
filter(grocery == T)
leaflet() %>%
setView(lng = -77.29751,
lat = 18.10958,
zoom = 9) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik) %>%
addCircleMarkers(lng = as.numeric(grocerystores$lng),
lat = as.numeric(grocerystores$lat),
stroke =T,
fillOpacity = 0.8,
popup = htmlEscape(paste(grocerystores$properties.name,
grocerystores$properties.address)
)
)
# Get data from CAC Server
CAC_con <- dbConnect(MySQL(),
dbname = "survey",
host = "192.168.0.23",
port = 3306,
user = "research",
password = "cacr123-")
grocerydata <- DBI::dbGetQuery(CAC_con,
"SELECT sf.ID,
sf.SurveyTitle,
sf.SurveyDate,
sf.MerchantID,
m.OutletType,
sf.MerchantName,
sf.MerchantTown,
sf.MerchantParish,
pp.ProductDescID,
pp.ProductDesc,
br.BrandName,
sd.Description,
pp.Price
FROM  survey.vSurveyForms sf
JOIN survey.vProdPrices pp ON sf.ID = pp.SurveyFormID
JOIN tblMerchant m ON sf.MerchantID = m.ID
JOIN tblBrand br ON pp.BrandID = br.ID
JOIN tblSizeDesc sd ON pp.SizeDescID = sd.ID
WHERE sf.SurveyTypeDesc='Grocery'")
dbDisconnect(CAC_con)
cacStEliz <- grocerydata %>%
filter(MerchantParish == "St. Elizabeth" & MerchantTown == "BLACK RIVER") %>%
select(MerchantName) %>%
unique()
View(cacStEliz)
View(grocerystores)
class(grocerystores$properties.name)
grocerystores <- getData[["features"]] %>%
flatten() %>%
mutate(grocery = map(properties.categories, str_detect,
pattern = "Grocery Store"),
grocery = map_lgl(grocery, any),
lng = map(geometry.coordinates, pluck, 1) %>%
unlist(),
lat = map(geometry.coordinates, pluck, 2) %>%
unlist(),
store = unlist(properties.name))
View(grocerystores)
grocerystores <- getData[["features"]] %>%
flatten() %>%
mutate(grocery = map(properties.categories, str_detect,
pattern = "Grocery Store"),
grocery = map_lgl(grocery, any),
lng = map(geometry.coordinates, pluck, 1) %>%
unlist(),
lat = map(geometry.coordinates, pluck, 2) %>%
unlist(),
store = unlist(properties.name)) %>%
filter(grocery == T)
warnings()
class(grocerystores$store)
class(cacStEliz$MerchantName)
runApp('CACPetrolApp')
shiny::runApp('CACPetrolApp')
<<<<<<< HEAD
shiny::runApp('CACPetrolApp')
unlist(properties.name)) %>%
filter(grocery == T)
grocerystores <- getGroceryData[["features"]] %>%
flatten() %>%
mutate(grocery = map(properties.categories, str_detect,
pattern = "Grocery Store"),
grocery = map_lgl(grocery, any),
lng = map(geometry.coordinates, pluck, 1) %>%
unlist(),
lat = map(geometry.coordinates, pluck, 2) %>%
unlist(),
store = unlist(properties.name)) %>%
filter(grocery == T)
runApp('CACPetrolApp')
=======
>>>>>>> eac80a6370e77de603e4f474e4e96c0dc5002abb
